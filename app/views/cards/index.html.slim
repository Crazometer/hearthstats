- set_meta_tags :title => 'Card Database',
  :description => 'Card Database',
  :keywords => 'cards, card, database, games, hearthstats, hearthstone, match, tracking, win, loss'

- provide(:title, t('.title'))
- provide(:subtitle, '');
- provide(:section, '')

form id="cardsFilter" method="get" class="data-turboform"
  p
    | #{t '.text_contains'}: &nbsp;
    input[name="text" value="#{@textFilter}"]
    | &nbsp; #{t '.filter_by'}: &nbsp;
    select name="class"
      option[value=""] - #{t '.any_class'} -
      option[value="neutral" selected=("selected" if @class_filter == "neutral")] Neutral
      - @classes.each do |c|
        option[value="#{c.id}" selected=("selected" if @class_filter.to_f == c.id.to_f)] = c.name
    | &nbsp;
    select name="type"
      option[value=""] - #{t '.any_type'} -
      - @types.each do |type|
        option[value="#{type.name}" selected=("selected" if @type_filter == type.name)] = type.name
    | &nbsp;
    select name="race"
      option[value=""] - #{t '.any_race'} -
      option[value="none" selected=("selected" if @race_filter == "none")] #{t '.none'}
      - @races.each do |race|
        option[value="#{race.id}" selected=("selected" if @race_filter.o_f == race.id.to_f)] = race.name
    | &nbsp; #{t '.sort_by'}: &nbsp;
    select name="sort"
      option[value="attack" selected=("selected" if @sort_field == "attack")] #{t '.attack'}
      option[value="health" selected=("selected" if @sort_field == "health")] #{t '.health_dur'}
      option[value="mana" selected=("selected" if @sort_field == "mana")] #{t '.mana_cost'}
      option[value="name" selected=("selected" if @sort_field == "name")] #{t '.name'}
    | &nbsp;
    select name="order"
      option[value="asc"] #{t '.ascending'}
      option[value="desc" selected=("selected" if @order_filter == "desc")] #{t '.descending'}
    | &nbsp;
    input type="submit" value="Submit" id="cardsFilterSubmit"
    | &nbsp;
    input type="button" value="#{t '.reset_filters'}" id="cardsFilterReset"

- if @cards.count == 0
  div[class="ui-state-error" style="padding:1em"]= t('.not_found')

javascript:
  function imgError(image) {
    image.onerror = "";
    image.src = "/assets/cards/notfound.gif";
    return true;
  }
- @cards.each do |card|
  div.card-index
    span = raw '<img class="lazy-load" src="' + card.getImageUrl() + '" title="' + card.name + '" onError="imgError(this);"/> '
